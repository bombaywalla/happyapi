{:RelationshipDetails {:type "object",
                       :description "Details about a relationship column.",
                       :id "RelationshipDetails",
                       :properties {:linkedTable {:type "string",
                                                  :description "The name of the table this relationship is linked to."}}},
 :Workspace {:description "A single workspace.",
             :properties {:createTime {:format "google-datetime",
                                       :description "Time when the workspace was created.",
                                       :type "string"},
                          :updateTime {:description "Time when the workspace was last updated.",
                                       :type "string",
                                       :format "google-datetime"},
                          :tables {:items {:$ref "Table"},
                                   :type "array",
                                   :description "The list of tables in the workspace."},
                          :displayName {:type "string",
                                        :description "The human readable title of the workspace."},
                          :name {:description "The resource name of the workspace. Workspace names have the form `workspaces/{workspace}`.",
                                 :type "string"}},
             :type "object",
             :id "Workspace"},
 :Table {:type "object",
         :properties {:timeZone {:description "The time zone of the table. IANA Time Zone Database time zone, e.g. \"America/New_York\".",
                                 :type "string"},
                      :name {:type "string",
                             :description "The resource name of the table. Table names have the form `tables/{table}`."},
                      :updateTime {:format "google-datetime",
                                   :type "string",
                                   :description "Time when the table was last updated excluding updates to individual rows"},
                      :createTime {:type "string",
                                   :format "google-datetime",
                                   :description "Time when the table was created."},
                      :columns {:type "array",
                                :description "List of columns in this table. Order of columns matches the display order.",
                                :items {:$ref "ColumnDescription"}},
                      :savedViews {:description "Saved views for this table.",
                                   :type "array",
                                   :items {:$ref "SavedView"}},
                      :displayName {:description "The human readable title of the table.",
                                    :type "string"}},
         :description "A single table. NextId: 8",
         :id "Table"},
 :CreateRowRequest {:type "object",
                    :description "Request message for TablesService.CreateRow.",
                    :id "CreateRowRequest",
                    :properties {:parent {:description "Required. The parent table where this row will be created. Format: tables/{table}",
                                          :type "string"},
                                 :view {:type "string",
                                        :description "Optional. Column key to use for values in the row. Defaults to user entered name.",
                                        :enum ["VIEW_UNSPECIFIED"
                                               "COLUMN_ID_VIEW"],
                                        :enumDescriptions ["Defaults to user entered text."
                                                           "Uses internally generated column id to identify values."]},
                                 :row {:$ref "Row",
                                       :description "Required. The row to create."}}},
 :ColumnDescription {:properties {:labels {:type "array",
                                           :items {:$ref "LabeledItem"},
                                           :description "Optional. Range of labeled values for the column. Some columns like tags and drop-downs limit the values to a set of possible values. We return the range of values in such cases to help clients implement better user data validation."},
                                  :lookupDetails {:$ref "LookupDetails",
                                                  :description "Optional. Indicates that this is a lookup column whose value is derived from the relationship column specified in the details. Lookup columns can not be updated directly. To change the value you must update the associated relationship column."},
                                  :relationshipDetails {:$ref "RelationshipDetails",
                                                        :description "Optional. Additional details about a relationship column. Specified when data_type is relationship."},
                                  :multipleValuesDisallowed {:description "Optional. Indicates whether or not multiple values are allowed for array types where such a restriction is possible.",
                                                             :type "boolean"},
                                  :name {:type "string",
                                         :description "column name"},
                                  :readonly {:description "Optional. Indicates that values for the column cannot be set by the user.",
                                             :type "boolean"},
                                  :dateDetails {:description "Optional. Additional details about a date column.",
                                                :$ref "DateDetails"},
                                  :dataType {:description "Data type of the column Supported types are auto_id, boolean, boolean_list, creator, create_timestamp, date, dropdown, location, integer, integer_list, number, number_list, person, person_list, tags, check_list, text, text_list, update_timestamp, updater, relationship, file_attachment_list. These types directly map to the column types supported on Tables website.",
                                             :type "string"},
                                  :id {:description "Internal id for a column.",
                                       :type "string"}},
                     :id "ColumnDescription",
                     :type "object",
                     :description "Details on a column in the table."},
 :ListTablesResponse {:type "object",
                      :description "Response message for TablesService.ListTables.",
                      :properties {:tables {:items {:$ref "Table"},
                                            :type "array",
                                            :description "The list of tables."},
                                   :nextPageToken {:description "A token, which can be sent as `page_token` to retrieve the next page. If this field is empty, there are no subsequent pages.",
                                                   :type "string"}},
                      :id "ListTablesResponse"},
 :ListWorkspacesResponse {:description "Response message for TablesService.ListWorkspaces.",
                          :id "ListWorkspacesResponse",
                          :type "object",
                          :properties {:workspaces {:type "array",
                                                    :description "The list of workspaces.",
                                                    :items {:$ref "Workspace"}},
                                       :nextPageToken {:description "A token, which can be sent as `page_token` to retrieve the next page. If this field is empty, there are no subsequent pages.",
                                                       :type "string"}}},
 :BatchDeleteRowsRequest {:description "Request message for TablesService.BatchDeleteRows",
                          :properties {:names {:type "array",
                                               :items {:type "string"},
                                               :description "Required. The names of the rows to delete. All rows must belong to the parent table or else the entire batch will fail. A maximum of 500 rows can be deleted in a batch. Format: tables/{table}/rows/{row}"}},
                          :type "object",
                          :id "BatchDeleteRowsRequest"},
 :Row {:id "Row",
       :properties {:values {:type "object",
                             :additionalProperties {:type "any"},
                             :description "The values of the row. This is a map of column key to value. Key is user entered name(default) or the internal column id based on the view in the request."},
                    :updateTime {:format "google-datetime",
                                 :type "string",
                                 :description "Time when the row was last updated."},
                    :name {:description "The resource name of the row. Row names have the form `tables/{table}/rows/{row}`. The name is ignored when creating a row.",
                           :type "string"},
                    :createTime {:description "Time when the row was created.",
                                 :format "google-datetime",
                                 :type "string"}},
       :description "A single row in a table.",
       :type "object"},
 :BatchUpdateRowsResponse {:id "BatchUpdateRowsResponse",
                           :type "object",
                           :description "Response message for TablesService.BatchUpdateRows.",
                           :properties {:rows {:type "array",
                                               :items {:$ref "Row"},
                                               :description "The updated rows."}}},
 :Empty {:properties {},
         :type "object",
         :id "Empty",
         :description "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"},
 :BatchCreateRowsRequest {:id "BatchCreateRowsRequest",
                          :type "object",
                          :description "Request message for TablesService.BatchCreateRows.",
                          :properties {:requests {:type "array",
                                                  :items {:$ref "CreateRowRequest"},
                                                  :description "Required. The request message specifying the rows to create. A maximum of 500 rows can be created in a single batch."}}},
 :ListRowsResponse {:properties {:rows {:description "The rows from the specified table.",
                                        :items {:$ref "Row"},
                                        :type "array"},
                                 :nextPageToken {:type "string",
                                                 :description "A token, which can be sent as `page_token` to retrieve the next page. If this field is empty, there are no subsequent pages."}},
                    :description "Response message for TablesService.ListRows.",
                    :id "ListRowsResponse",
                    :type "object"},
 :LabeledItem {:properties {:name {:description "Display string as entered by user.",
                                   :type "string"},
                            :id {:type "string",
                                 :description "Internal id associated with the item."}},
               :id "LabeledItem",
               :description "A single item in a labeled column.",
               :type "object"},
 :BatchCreateRowsResponse {:description "Response message for TablesService.BatchCreateRows.",
                           :properties {:rows {:type "array",
                                               :description "The created rows.",
                                               :items {:$ref "Row"}}},
                           :id "BatchCreateRowsResponse",
                           :type "object"},
 :BatchUpdateRowsRequest {:type "object",
                          :id "BatchUpdateRowsRequest",
                          :properties {:requests {:type "array",
                                                  :items {:$ref "UpdateRowRequest"},
                                                  :description "Required. The request messages specifying the rows to update. A maximum of 500 rows can be modified in a single batch."}},
                          :description "Request message for TablesService.BatchUpdateRows."},
 :SavedView {:type "object",
             :description "A saved view of a table. NextId: 3",
             :id "SavedView",
             :properties {:id {:description "Internal id associated with the saved view.",
                               :type "string"},
                          :name {:description "Display name of the saved view.",
                                 :type "string"}}},
 :UpdateRowRequest {:type "object",
                    :description "Request message for TablesService.UpdateRow.",
                    :properties {:updateMask {:format "google-fieldmask",
                                              :description "The list of fields to update.",
                                              :type "string"},
                                 :view {:description "Optional. Column key to use for values in the row. Defaults to user entered name.",
                                        :type "string",
                                        :enumDescriptions ["Defaults to user entered text."
                                                           "Uses internally generated column id to identify values."],
                                        :enum ["VIEW_UNSPECIFIED"
                                               "COLUMN_ID_VIEW"]},
                                 :row {:$ref "Row",
                                       :description "Required. The row to update."}},
                    :id "UpdateRowRequest"},
 :DateDetails {:type "object",
               :description "Details about a date column.",
               :properties {:hasTime {:description "Whether the date column includes time.",
                                      :type "boolean"}},
               :id "DateDetails"},
 :LookupDetails {:description "Details about a lookup column whose value comes from the associated relationship.",
                 :properties {:relationshipColumnId {:type "string",
                                                     :description "The id of the relationship column."},
                              :relationshipColumn {:description "The name of the relationship column associated with the lookup.",
                                                   :type "string"}},
                 :id "LookupDetails",
                 :type "object"}}
