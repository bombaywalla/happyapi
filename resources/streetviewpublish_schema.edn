{:ProcessingFailureDetails {:id "ProcessingFailureDetails",
                            :type "object",
                            :properties {:notOutdoorsDetails {:$ref "NotOutdoorsFailureDetails",
                                                              :description "See NotOutdoorsFailureDetails."},
                                         :noOverlapGpsDetails {:description "See NoOverlapGpsFailureDetails.",
                                                               :$ref "NoOverlapGpsFailureDetails"},
                                         :insufficientGpsDetails {:description "See InsufficientGpsFailureDetails.",
                                                                  :$ref "InsufficientGpsFailureDetails"},
                                         :gpsDataGapDetails {:$ref "GpsDataGapFailureDetails",
                                                             :description "See GpsDataGapFailureDetails."},
                                         :imuDataGapDetails {:description "See ImuDataGapFailureDetails.",
                                                             :$ref "ImuDataGapFailureDetails"}},
                            :description "Additional details to accompany the ProcessingFailureReason enum. This message is always expected to be used in conjunction with ProcessingFailureReason, and the oneof value set in this message should match the FailureReason."},
 :NoOverlapGpsFailureDetails {:id "NoOverlapGpsFailureDetails",
                              :properties {:videoStartTime {:format "google-datetime",
                                                            :type "string",
                                                            :description "Start time of video."},
                                           :gpsEndTime {:format "google-datetime",
                                                        :description "Time of last recorded GPS point.",
                                                        :type "string"},
                                           :gpsStartTime {:type "string",
                                                          :description "Time of first recorded GPS point.",
                                                          :format "google-datetime"},
                                           :videoEndTime {:description "End time of video.",
                                                          :format "google-datetime",
                                                          :type "string"}},
                              :description "Details related to PhotoSequenceProcessingFailureReason#NO_OVERLAP_GPS.",
                              :type "object"},
 :BatchGetPhotosResponse {:properties {:results {:type "array",
                                                 :items {:$ref "PhotoResponse"},
                                                 :description "List of results for each individual Photo requested, in the same order as the requests in BatchGetPhotos."}},
                          :description "Response to batch get of Photos.",
                          :id "BatchGetPhotosResponse",
                          :type "object"},
 :UpdatePhotoRequest {:properties {:updateMask {:format "google-fieldmask",
                                                :description "Required. Mask that identifies fields on the photo metadata to update. If not present, the old Photo metadata is entirely replaced with the new Photo metadata in this request. The update fails if invalid fields are specified. Multiple fields can be specified in a comma-delimited list. The following fields are valid: * `pose.heading` * `pose.lat_lng_pair` * `pose.pitch` * `pose.roll` * `pose.level` * `pose.altitude` * `connections` * `places` > Note: When updateMask contains repeated fields, the entire set of repeated values get replaced with the new contents. For example, if updateMask contains `connections` and `UpdatePhotoRequest.photo.connections` is empty, all connections are removed.",
                                                :type "string"},
                                   :photo {:description "Required. Photo object containing the new metadata.",
                                           :$ref "Photo"}},
                      :description "Request to update the metadata of a Photo. Updating the pixels of a photo is not supported.",
                      :type "object",
                      :id "UpdatePhotoRequest"},
 :PhotoSequence {:properties {:uploadTime {:readOnly true,
                                           :format "google-datetime",
                                           :description "Output only. The time this photo sequence was created in uSV Store service.",
                                           :type "string"},
                              :gpsSource {:enumDescriptions ["GPS in raw_gps_timeline takes precedence if it exists."
                                                             "GPS in Camera Motion Metadata Track (CAMM) takes precedence if it exists."],
                                          :description "Input only. If both raw_gps_timeline and the Camera Motion Metadata Track (CAMM) contain GPS measurements, indicate which takes precedence.",
                                          :type "string",
                                          :enum ["PHOTO_SEQUENCE"
                                                 "CAMERA_MOTION_METADATA_TRACK"]},
                              :imu {:$ref "Imu",
                                    :description "Input only. Three axis IMU data for the collection. If this data is too large to put in the request, then it should be put in the CAMM track for the video. This data always takes precedence over the equivalent CAMM data, if it exists."},
                              :distanceMeters {:description "Output only. The computed distance of the photo sequence in meters.",
                                               :format "double",
                                               :readOnly true,
                                               :type "number"},
                              :captureTimeOverride {:description "Optional. Absolute time when the photo sequence starts to be captured. If the photo sequence is a video, this is the start time of the video. If this field is populated in input, it overrides the capture time in the video or XDM file.",
                                                    :format "google-datetime",
                                                    :type "string"},
                              :rawGpsTimeline {:type "array",
                                               :description "Input only. Raw GPS measurements with increasing timestamps from the device that aren't time synced with each photo. These raw measurements will be used to infer the pose of each frame. Required in input when InputType is VIDEO and raw GPS measurements are not in Camera Motion Metadata Track (CAMM). User can indicate which takes precedence using gps_source if raw GPS measurements are provided in both raw_gps_timeline and Camera Motion Metadata Track (CAMM).",
                                               :items {:$ref "Pose"}},
                              :uploadReference {:description "Input only. Required when creating photo sequence. The resource name where the bytes of the photo sequence (in the form of video) are uploaded.",
                                                :$ref "UploadRef"},
                              :processingState {:enumDescriptions ["The state is unspecified, this is the default value."
                                                                   "The sequence has not yet started processing."
                                                                   "The sequence is currently in processing."
                                                                   "The sequence has finished processing including refining position."
                                                                   "The sequence failed processing. See FailureReason for more details."],
                                                :enum ["PROCESSING_STATE_UNSPECIFIED"
                                                       "PENDING"
                                                       "PROCESSING"
                                                       "PROCESSED"
                                                       "FAILED"],
                                                :readOnly true,
                                                :type "string",
                                                :description "Output only. The processing state of this sequence."},
                              :filename {:description "Output only. The filename of the upload. Does not include the directory path. Only available if the sequence was uploaded on a platform that provides the filename.",
                                         :type "string",
                                         :readOnly true},
                              :photos {:type "array",
                                       :readOnly true,
                                       :items {:$ref "Photo"},
                                       :description "Output only. Photos with increasing timestamps."},
                              :id {:type "string",
                                   :readOnly true,
                                   :description "Output only. Unique identifier for the photo sequence. This also acts as a long running operation ID if uploading is performed asynchronously."},
                              :viewCount {:format "int64",
                                          :description "Output only. The total number of views that all the published images in this PhotoSequence have received.",
                                          :readOnly true,
                                          :type "string"},
                              :failureDetails {:$ref "ProcessingFailureDetails",
                                               :readOnly true,
                                               :description "Output only. If this sequence has `failure_reason` set, this may contain additional details about the failure."},
                              :sequenceBounds {:readOnly true,
                                               :description "Output only. A rectangular box that encapsulates every image in this photo sequence.",
                                               :$ref "LatLngBounds"},
                              :failureReason {:enumDescriptions ["The failure reason is unspecified, this is the default value."
                                                                 "Video frame's resolution is too small."
                                                                 "This video has been uploaded before."
                                                                 "Too few GPS points."
                                                                 "No overlap between the time frame of GPS track and the time frame of video."
                                                                 "GPS is invalid (e.x. all GPS points are at (0,0))"
                                                                 "The sequence of photos could not be accurately located in the world."
                                                                 "The sequence was taken down for policy reasons."
                                                                 "The video file was corrupt or could not be decoded."
                                                                 "A permanent failure in the underlying system occurred."
                                                                 "The video format is invalid or unsupported."
                                                                 "Invalid image aspect ratio found."
                                                                 "Invalid capture time. Timestamps were from the future."
                                                                 "GPS data contains a gap greater than 5 seconds in duration."
                                                                 "GPS data is too erratic to be processed."
                                                                 "IMU (Accelerometer, Gyroscope, etc.) data are not valid. They may be missing required fields (x, y, z or time), may not be formatted correctly, or any other issue that prevents our systems from parsing it."
                                                                 "Too few IMU points."
                                                                 "Insufficient overlap in the time frame between GPS, IMU, and other time series data."
                                                                 "IMU (Accelerometer, Gyroscope, etc.) data contain gaps greater than 0.1 seconds in duration."
                                                                 "The camera is not supported."
                                                                 "Some frames were indoors, which is unsupported."
                                                                 "Not enough video frames."
                                                                 "Not enough moving data."
                                                                 "Mast is down."
                                                                 "Camera is covered."],
                                              :readOnly true,
                                              :enum ["PROCESSING_FAILURE_REASON_UNSPECIFIED"
                                                     "LOW_RESOLUTION"
                                                     "DUPLICATE"
                                                     "INSUFFICIENT_GPS"
                                                     "NO_OVERLAP_GPS"
                                                     "INVALID_GPS"
                                                     "FAILED_TO_REFINE_POSITIONS"
                                                     "TAKEDOWN"
                                                     "CORRUPT_VIDEO"
                                                     "INTERNAL"
                                                     "INVALID_VIDEO_FORMAT"
                                                     "INVALID_VIDEO_DIMENSIONS"
                                                     "INVALID_CAPTURE_TIME"
                                                     "GPS_DATA_GAP"
                                                     "JUMPY_GPS"
                                                     "INVALID_IMU"
                                                     "INSUFFICIENT_IMU"
                                                     "INSUFFICIENT_OVERLAP_TIME_SERIES"
                                                     "IMU_DATA_GAP"
                                                     "UNSUPPORTED_CAMERA"
                                                     "NOT_OUTDOORS"
                                                     "INSUFFICIENT_VIDEO_FRAMES"
                                                     "INSUFFICIENT_MOVEMENT"
                                                     "MAST_DOWN"
                                                     "CAMERA_COVERED"],
                                              :description "Output only. If this sequence has processing_state = FAILED, this will contain the reason why it failed. If the processing_state is any other value, this field will be unset.",
                                              :type "string"}},
                 :description "A sequence of 360 photos along with metadata.",
                 :type "object",
                 :id "PhotoSequence"},
 :BatchUpdatePhotosRequest {:id "BatchUpdatePhotosRequest",
                            :properties {:updatePhotoRequests {:items {:$ref "UpdatePhotoRequest"},
                                                               :description "Required. List of UpdatePhotoRequests.",
                                                               :type "array"}},
                            :description "Request to update the metadata of photos. Updating the pixels of photos is not supported.",
                            :type "object"},
 :Operation {:id "Operation",
             :type "object",
             :description "This resource represents a long-running operation that is the result of a network API call.",
             :properties {:response {:additionalProperties {:description "Properties of the object. Contains field @type with type URL.",
                                                            :type "any"},
                                     :description "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                                     :type "object"},
                          :done {:type "boolean",
                                 :description "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."},
                          :name {:description "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                                 :type "string"},
                          :metadata {:additionalProperties {:description "Properties of the object. Contains field @type with type URL.",
                                                            :type "any"},
                                     :type "object",
                                     :description "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."},
                          :error {:$ref "Status",
                                  :description "The error result of the operation in case of failure or cancellation."}}},
 :BatchDeletePhotosRequest {:properties {:photoIds {:description "Required. IDs of the Photos. HTTP GET requests require the following syntax for the URL query parameter: `photoIds=&photoIds=&...`.",
                                                    :type "array",
                                                    :items {:type "string"}}},
                            :id "BatchDeletePhotosRequest",
                            :description "Request to delete multiple Photos.",
                            :type "object"},
 :LatLngBounds {:description "A rectangle in geographical coordinates.",
                :type "object",
                :properties {:northeast {:description "The northeast corner of these bounds.",
                                         :$ref "LatLng"},
                             :southwest {:description "The southwest corner of these bounds.",
                                         :$ref "LatLng"}},
                :id "LatLngBounds"},
 :BatchUpdatePhotosResponse {:type "object",
                             :description "Response to batch update of metadata of one or more Photos.",
                             :id "BatchUpdatePhotosResponse",
                             :properties {:results {:items {:$ref "PhotoResponse"},
                                                    :description "List of results for each individual Photo updated, in the same order as the request.",
                                                    :type "array"}}},
 :Measurement3d {:type "object",
                 :id "Measurement3d",
                 :properties {:y {:format "float",
                                  :type "number",
                                  :description "The sensor measurement in the y axis."},
                              :z {:description "The sensor measurement in the z axis.",
                                  :format "float",
                                  :type "number"},
                              :x {:type "number",
                                  :description "The sensor measurement in the x axis.",
                                  :format "float"},
                              :captureTime {:description "The timestamp of the IMU measurement.",
                                            :type "string",
                                            :format "google-datetime"}},
                 :description "A Generic 3d measurement sample."},
 :ImuDataGapFailureDetails {:description "Details related to ProcessingFailureReason#IMU_DATA_GAP. If there are multiple IMU data gaps, only the one with the largest duration is reported here.",
                            :type "object",
                            :id "ImuDataGapFailureDetails",
                            :properties {:gapStartTime {:type "string",
                                                        :description "Relative time (from the start of the video stream) when the gap started.",
                                                        :format "google-duration"},
                                         :gapDuration {:type "string",
                                                       :format "google-duration",
                                                       :description "The duration of the gap in IMU data that was found."}}},
 :Empty {:description "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
         :properties {},
         :type "object",
         :id "Empty"},
 :LatLng {:type "object",
          :properties {:latitude {:format "double",
                                  :description "The latitude in degrees. It must be in the range [-90.0, +90.0].",
                                  :type "number"},
                       :longitude {:description "The longitude in degrees. It must be in the range [-180.0, +180.0].",
                                   :type "number",
                                   :format "double"}},
          :id "LatLng",
          :description "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges."},
 :Level {:description "Level information containing level number and its corresponding name.",
         :type "object",
         :id "Level",
         :properties {:name {:type "string",
                             :description "Required. A name assigned to this Level, restricted to 3 characters. Consider how the elevator buttons would be labeled for this level if there was an elevator."},
                      :number {:description "Optional. Floor number, used for ordering. 0 indicates the ground level, 1 indicates the first level above ground level, -1 indicates the first level under ground level. Non-integer values are OK.",
                               :format "double",
                               :type "number"}}},
 :NotOutdoorsFailureDetails {:type "object",
                             :properties {:startTime {:format "google-duration",
                                                      :type "string",
                                                      :description "Relative time (from the start of the video stream) when an indoor frame was found."}},
                             :id "NotOutdoorsFailureDetails",
                             :description "Details related to ProcessingFailureReason#NOT_OUTDOORS. If there are multiple indoor frames found, the first frame is recorded here."},
 :UploadRef {:type "object",
             :id "UploadRef",
             :description "Upload reference for media files.",
             :properties {:uploadUrl {:type "string",
                                      :description "An upload reference should be unique for each user. It follows the form: \"https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}\""}}},
 :Photo {:id "Photo",
         :description "Photo is used to store 360 photos along with photo metadata.",
         :type "object",
         :properties {:uploadTime {:format "google-datetime",
                                   :description "Output only. Time when the image was uploaded.",
                                   :readOnly true,
                                   :type "string"},
                      :captureTime {:description "Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.",
                                    :type "string",
                                    :format "google-datetime"},
                      :thumbnailUrl {:type "string",
                                     :description "Output only. The thumbnail URL for showing a preview of the given photo.",
                                     :readOnly true},
                      :uploadReference {:$ref "UploadRef",
                                        :description "Input only. Required when creating a photo. Input only. The resource URL where the photo bytes are uploaded to."},
                      :viewCount {:type "string",
                                  :description "Output only. View count of the photo.",
                                  :readOnly true,
                                  :format "int64"},
                      :transferStatus {:enum ["TRANSFER_STATUS_UNKNOWN"
                                              "NEVER_TRANSFERRED"
                                              "PENDING"
                                              "COMPLETED"
                                              "REJECTED"
                                              "EXPIRED"
                                              "CANCELLED"
                                              "RECEIVED_VIA_TRANSFER"],
                                       :enumDescriptions ["The status of this transfer is unspecified."
                                                          "This photo has never been in a transfer."
                                                          "This photo transfer has been initiated, but the receiver has not yet responded."
                                                          "The photo transfer has been completed, and this photo has been transferred to the recipient."
                                                          "The recipient rejected this photo transfer."
                                                          "The photo transfer expired before the recipient took any action."
                                                          "The sender cancelled this photo transfer."
                                                          "The recipient owns this photo due to a rights transfer."],
                                       :type "string",
                                       :readOnly true,
                                       :description "Output only. Status of rights transfer on this photo."},
                      :pose {:description "Optional. Pose of the photo.",
                             :$ref "Pose"},
                      :shareLink {:description "Output only. The share link for the photo.",
                                  :readOnly true,
                                  :type "string"},
                      :mapsPublishStatus {:enumDescriptions ["The status of the photo is unknown."
                                                             "The photo is published to the public through Google Maps."
                                                             "The photo has been rejected for an unknown reason."],
                                          :type "string",
                                          :enum ["UNSPECIFIED_MAPS_PUBLISH_STATUS"
                                                 "PUBLISHED"
                                                 "REJECTED_UNKNOWN"],
                                          :readOnly true,
                                          :description "Output only. Status in Google Maps, whether this photo was published or rejected."},
                      :downloadUrl {:description "Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.",
                                    :readOnly true,
                                    :type "string"},
                      :connections {:type "array",
                                    :description "Optional. Connections to other photos. A connection represents the link from this photo to another photo.",
                                    :items {:$ref "Connection"}},
                      :places {:description "Optional. Places where this photo belongs.",
                               :type "array",
                               :items {:$ref "Place"}},
                      :photoId {:readOnly true,
                                :$ref "PhotoId",
                                :description "Required. Output only. Required when updating a photo. Output only when creating a photo. Identifier for the photo, which is unique among all photos in Google."}}},
 :GpsDataGapFailureDetails {:type "object",
                            :properties {:gapStartTime {:type "string",
                                                        :description "Relative time (from the start of the video stream) when the gap started.",
                                                        :format "google-duration"},
                                         :gapDuration {:description "The duration of the gap in GPS data that was found.",
                                                       :format "google-duration",
                                                       :type "string"}},
                            :description "Details related to ProcessingFailureReason#GPS_DATA_GAP. If there are multiple GPS data gaps, only the one with the largest duration is reported here.",
                            :id "GpsDataGapFailureDetails"},
 :Place {:properties {:name {:readOnly true,
                             :type "string",
                             :description "Output only. The name of the place, localized to the language_code."},
                      :placeId {:description "Place identifier, as described in https://developers.google.com/places/place-id.",
                                :type "string"},
                      :languageCode {:description "Output only. The language_code that the name is localized with. This should be the language_code specified in the request, but may be a fallback.",
                                     :type "string",
                                     :readOnly true}},
         :type "object",
         :id "Place",
         :description "Place metadata for an entity."},
 :ListPhotoSequencesResponse {:id "ListPhotoSequencesResponse",
                              :description "Response to list all photo sequences that belong to a user.",
                              :properties {:nextPageToken {:type "string",
                                                           :description "Token to retrieve the next page of results, or empty if there are no more results in the list."},
                                           :photoSequences {:items {:$ref "Operation"},
                                                            :description "List of photo sequences via Operation interface. The maximum number of items returned is based on the pageSize field in the request. Each item in the list can have three possible states, * `Operation.done` = false, if the processing of PhotoSequence is not finished yet. * `Operation.done` = true and `Operation.error` is populated, if there was an error in processing. * `Operation.done` = true and `Operation.response` contains a PhotoSequence message, In each sequence, only Id is populated.",
                                                            :type "array"}},
                              :type "object"},
 :BatchDeletePhotosResponse {:description "Response to batch delete of one or more Photos.",
                             :id "BatchDeletePhotosResponse",
                             :properties {:status {:description "The status for the operation to delete a single Photo in the batch request.",
                                                   :items {:$ref "Status"},
                                                   :type "array"}},
                             :type "object"},
 :PhotoId {:properties {:id {:type "string",
                             :description "A unique identifier for a photo."}},
           :description "Identifier for a Photo.",
           :id "PhotoId",
           :type "object"},
 :Pose {:properties {:pitch {:description "Pitch, measured at the center of the photo in degrees. Value must be >=-90 and <= 90. A value of -90 means looking directly down, and a value of 90 means looking directly up. NaN indicates an unmeasured quantity.",
                             :type "number",
                             :format "double"},
                     :accuracyMeters {:description "The estimated horizontal accuracy of this pose in meters with 68% confidence (one standard deviation). For example, on Android, this value is available from this method: https://developer.android.com/reference/android/location/Location#getAccuracy(). Other platforms have different methods of obtaining similar accuracy estimations.",
                                      :type "number",
                                      :format "float"},
                     :gpsRecordTimestampUnixEpoch {:type "string",
                                                   :description "Time of the GPS record since UTC epoch.",
                                                   :format "google-datetime"},
                     :heading {:description "The following pose parameters pertain to the center of the photo. They match https://developers.google.com/streetview/spherical-metadata. Compass heading, measured at the center of the photo in degrees clockwise from North. Value must be >=0 and <360. NaN indicates an unmeasured quantity.",
                               :format "double",
                               :type "number"},
                     :altitude {:format "double",
                                :description "Altitude of the pose in meters above WGS84 ellipsoid. NaN indicates an unmeasured quantity.",
                                :type "number"},
                     :latLngPair {:description "Latitude and longitude pair of the pose, as explained here: https://cloud.google.com/datastore/docs/reference/rest/Shared.Types/LatLng When creating a Photo, if the latitude and longitude pair are not provided, the geolocation from the exif header is used. A latitude and longitude pair not provided in the photo or exif header causes the photo process to fail.",
                                  :$ref "LatLng"},
                     :level {:description "Level (the floor in a building) used to configure vertical navigation.",
                             :$ref "Level"},
                     :roll {:description "Roll, measured in degrees. Value must be >= 0 and <360. A value of 0 means level with the horizon. NaN indicates an unmeasured quantity.",
                            :format "double",
                            :type "number"}},
        :description "Raw pose measurement for an entity.",
        :id "Pose",
        :type "object"},
 :InsufficientGpsFailureDetails {:description "Details related to ProcessingFailureReason#INSUFFICIENT_GPS.",
                                 :type "object",
                                 :properties {:gpsPointsFound {:format "int32",
                                                               :type "integer",
                                                               :description "The number of GPS points that were found in the video."}},
                                 :id "InsufficientGpsFailureDetails"},
 :Imu {:description "IMU data from the device sensors.",
       :type "object",
       :properties {:magUt {:description "The magnetometer measurements of the magnetic field in microtesla (uT) with increasing timestamps from devices.",
                            :items {:$ref "Measurement3d"},
                            :type "array"},
                    :gyroRps {:items {:$ref "Measurement3d"},
                              :description "The gyroscope measurements in radians/sec with increasing timestamps from devices.",
                              :type "array"},
                    :accelMpsps {:type "array",
                                 :description "The accelerometer measurements in meters/sec^2 with increasing timestamps from devices.",
                                 :items {:$ref "Measurement3d"}}},
       :id "Imu"},
 :ListPhotosResponse {:description "Response to list all photos that belong to a user.",
                      :type "object",
                      :id "ListPhotosResponse",
                      :properties {:nextPageToken {:type "string",
                                                   :description "Token to retrieve the next page of results, or empty if there are no more results in the list."},
                                   :photos {:description "List of photos. The pageSize field in the request determines the number of items returned.",
                                            :type "array",
                                            :items {:$ref "Photo"}}}},
 :Connection {:id "Connection",
              :description "A connection is the link from a source photo to a destination photo.",
              :properties {:target {:$ref "PhotoId",
                                    :description "Required. The destination of the connection from the containing photo to another photo."}},
              :type "object"},
 :PhotoResponse {:properties {:status {:description "The status for the operation to get or update a single photo in the batch request.",
                                       :$ref "Status"},
                              :photo {:$ref "Photo",
                                      :description "The Photo resource, if the request was successful."}},
                 :description "Response payload for a single Photo in batch operations including BatchGetPhotos and BatchUpdatePhotos.",
                 :id "PhotoResponse",
                 :type "object"},
 :Status {:properties {:code {:type "integer",
                              :format "int32",
                              :description "The status code, which should be an enum value of google.rpc.Code."},
                       :details {:type "array",
                                 :items {:additionalProperties {:description "Properties of the object. Contains field @type with type URL.",
                                                                :type "any"},
                                         :type "object"},
                                 :description "A list of messages that carry the error details. There is a common set of message types for APIs to use."},
                       :message {:type "string",
                                 :description "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."}},
          :description "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
          :id "Status",
          :type "object"}}
