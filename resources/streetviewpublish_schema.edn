{:ProcessingFailureDetails {:properties {:gpsDataGapDetails {:description "See GpsDataGapFailureDetails.",
                                                             :$ref "GpsDataGapFailureDetails"},
                                         :imuDataGapDetails {:$ref "ImuDataGapFailureDetails",
                                                             :description "See ImuDataGapFailureDetails."},
                                         :noOverlapGpsDetails {:description "See NoOverlapGpsFailureDetails.",
                                                               :$ref "NoOverlapGpsFailureDetails"},
                                         :insufficientGpsDetails {:description "See InsufficientGpsFailureDetails.",
                                                                  :$ref "InsufficientGpsFailureDetails"},
                                         :notOutdoorsDetails {:$ref "NotOutdoorsFailureDetails",
                                                              :description "See NotOutdoorsFailureDetails."}},
                            :id "ProcessingFailureDetails",
                            :type "object",
                            :description "Additional details to accompany the ProcessingFailureReason enum. This message is always expected to be used in conjunction with ProcessingFailureReason, and the oneof value set in this message should match the FailureReason."},
 :NoOverlapGpsFailureDetails {:description "Details related to PhotoSequenceProcessingFailureReason#NO_OVERLAP_GPS.",
                              :id "NoOverlapGpsFailureDetails",
                              :properties {:videoEndTime {:format "google-datetime",
                                                          :type "string",
                                                          :description "End time of video."},
                                           :videoStartTime {:type "string",
                                                            :description "Start time of video.",
                                                            :format "google-datetime"},
                                           :gpsEndTime {:format "google-datetime",
                                                        :type "string",
                                                        :description "Time of last recorded GPS point."},
                                           :gpsStartTime {:type "string",
                                                          :description "Time of first recorded GPS point.",
                                                          :format "google-datetime"}},
                              :type "object"},
 :BatchGetPhotosResponse {:id "BatchGetPhotosResponse",
                          :description "Response to batch get of Photos.",
                          :type "object",
                          :properties {:results {:items {:$ref "PhotoResponse"},
                                                 :type "array",
                                                 :description "List of results for each individual Photo requested, in the same order as the requests in BatchGetPhotos."}}},
 :UpdatePhotoRequest {:description "Request to update the metadata of a Photo. Updating the pixels of a photo is not supported.",
                      :properties {:updateMask {:format "google-fieldmask",
                                                :description "Required. Mask that identifies fields on the photo metadata to update. If not present, the old Photo metadata is entirely replaced with the new Photo metadata in this request. The update fails if invalid fields are specified. Multiple fields can be specified in a comma-delimited list. The following fields are valid: * `pose.heading` * `pose.lat_lng_pair` * `pose.pitch` * `pose.roll` * `pose.level` * `pose.altitude` * `connections` * `places` > Note: When updateMask contains repeated fields, the entire set of repeated values get replaced with the new contents. For example, if updateMask contains `connections` and `UpdatePhotoRequest.photo.connections` is empty, all connections are removed.",
                                                :type "string"},
                                   :photo {:$ref "Photo",
                                           :description "Required. Photo object containing the new metadata."}},
                      :id "UpdatePhotoRequest",
                      :type "object"},
 :PhotoSequence {:properties {:uploadTime {:format "google-datetime",
                                           :description "Output only. The time this photo sequence was created in uSV Store service.",
                                           :type "string",
                                           :readOnly true},
                              :gpsSource {:enum ["PHOTO_SEQUENCE"
                                                 "CAMERA_MOTION_METADATA_TRACK"],
                                          :type "string",
                                          :description "Input only. If both raw_gps_timeline and the Camera Motion Metadata Track (CAMM) contain GPS measurements, indicate which takes precedence.",
                                          :enumDescriptions ["GPS in raw_gps_timeline takes precedence if it exists."
                                                             "GPS in Camera Motion Metadata Track (CAMM) takes precedence if it exists."]},
                              :imu {:$ref "Imu",
                                    :description "Input only. Three axis IMU data for the collection. If this data is too large to put in the request, then it should be put in the CAMM track for the video. This data always takes precedence over the equivalent CAMM data, if it exists."},
                              :distanceMeters {:type "number",
                                               :readOnly true,
                                               :description "Output only. The computed distance of the photo sequence in meters.",
                                               :format "double"},
                              :captureTimeOverride {:description "Optional. Absolute time when the photo sequence starts to be captured. If the photo sequence is a video, this is the start time of the video. If this field is populated in input, it overrides the capture time in the video or XDM file.",
                                                    :format "google-datetime",
                                                    :type "string"},
                              :rawGpsTimeline {:items {:$ref "Pose"},
                                               :description "Input only. Raw GPS measurements with increasing timestamps from the device that aren't time synced with each photo. These raw measurements will be used to infer the pose of each frame. Required in input when InputType is VIDEO and raw GPS measurements are not in Camera Motion Metadata Track (CAMM). User can indicate which takes precedence using gps_source if raw GPS measurements are provided in both raw_gps_timeline and Camera Motion Metadata Track (CAMM).",
                                               :type "array"},
                              :uploadReference {:$ref "UploadRef",
                                                :description "Input only. Required when creating photo sequence. The resource name where the bytes of the photo sequence (in the form of video) are uploaded."},
                              :processingState {:enumDescriptions ["The state is unspecified, this is the default value."
                                                                   "The sequence has not yet started processing."
                                                                   "The sequence is currently in processing."
                                                                   "The sequence has finished processing including refining position."
                                                                   "The sequence failed processing. See FailureReason for more details."],
                                                :readOnly true,
                                                :enum ["PROCESSING_STATE_UNSPECIFIED"
                                                       "PENDING"
                                                       "PROCESSING"
                                                       "PROCESSED"
                                                       "FAILED"],
                                                :description "Output only. The processing state of this sequence.",
                                                :type "string"},
                              :filename {:readOnly true,
                                         :description "Output only. The filename of the upload. Does not include the directory path. Only available if the sequence was uploaded on a platform that provides the filename.",
                                         :type "string"},
                              :photos {:type "array",
                                       :description "Output only. Photos with increasing timestamps.",
                                       :items {:$ref "Photo"},
                                       :readOnly true},
                              :id {:description "Output only. Unique identifier for the photo sequence. This also acts as a long running operation ID if uploading is performed asynchronously.",
                                   :readOnly true,
                                   :type "string"},
                              :viewCount {:description "Output only. The total number of views that all the published images in this PhotoSequence have received.",
                                          :type "string",
                                          :readOnly true,
                                          :format "int64"},
                              :failureDetails {:description "Output only. If this sequence has `failure_reason` set, this may contain additional details about the failure.",
                                               :$ref "ProcessingFailureDetails",
                                               :readOnly true},
                              :sequenceBounds {:$ref "LatLngBounds",
                                               :readOnly true,
                                               :description "Output only. A rectangular box that encapsulates every image in this photo sequence."},
                              :failureReason {:description "Output only. If this sequence has processing_state = FAILED, this will contain the reason why it failed. If the processing_state is any other value, this field will be unset.",
                                              :type "string",
                                              :readOnly true,
                                              :enumDescriptions ["The failure reason is unspecified, this is the default value."
                                                                 "Video frame's resolution is too small."
                                                                 "This video has been uploaded before."
                                                                 "Too few GPS points."
                                                                 "No overlap between the time frame of GPS track and the time frame of video."
                                                                 "GPS is invalid (e.x. all GPS points are at (0,0))"
                                                                 "The sequence of photos could not be accurately located in the world."
                                                                 "The sequence was taken down for policy reasons."
                                                                 "The video file was corrupt or could not be decoded."
                                                                 "A permanent failure in the underlying system occurred."
                                                                 "The video format is invalid or unsupported."
                                                                 "Invalid image aspect ratio found."
                                                                 "Invalid capture time. Timestamps were from the future."
                                                                 "GPS data contains a gap greater than 5 seconds in duration."
                                                                 "GPS data is too erratic to be processed."
                                                                 "IMU (Accelerometer, Gyroscope, etc.) data are not valid. They may be missing required fields (x, y, z or time), may not be formatted correctly, or any other issue that prevents our systems from parsing it."
                                                                 "Too few IMU points."
                                                                 "Insufficient overlap in the time frame between GPS, IMU, and other time series data."
                                                                 "IMU (Accelerometer, Gyroscope, etc.) data contain gaps greater than 0.1 seconds in duration."
                                                                 "The camera is not supported."
                                                                 "Some frames were indoors, which is unsupported."
                                                                 "Not enough video frames."
                                                                 "Not enough moving data."
                                                                 "Mast is down."
                                                                 "Camera is covered."],
                                              :enum ["PROCESSING_FAILURE_REASON_UNSPECIFIED"
                                                     "LOW_RESOLUTION"
                                                     "DUPLICATE"
                                                     "INSUFFICIENT_GPS"
                                                     "NO_OVERLAP_GPS"
                                                     "INVALID_GPS"
                                                     "FAILED_TO_REFINE_POSITIONS"
                                                     "TAKEDOWN"
                                                     "CORRUPT_VIDEO"
                                                     "INTERNAL"
                                                     "INVALID_VIDEO_FORMAT"
                                                     "INVALID_VIDEO_DIMENSIONS"
                                                     "INVALID_CAPTURE_TIME"
                                                     "GPS_DATA_GAP"
                                                     "JUMPY_GPS"
                                                     "INVALID_IMU"
                                                     "INSUFFICIENT_IMU"
                                                     "INSUFFICIENT_OVERLAP_TIME_SERIES"
                                                     "IMU_DATA_GAP"
                                                     "UNSUPPORTED_CAMERA"
                                                     "NOT_OUTDOORS"
                                                     "INSUFFICIENT_VIDEO_FRAMES"
                                                     "INSUFFICIENT_MOVEMENT"
                                                     "MAST_DOWN"
                                                     "CAMERA_COVERED"]}},
                 :id "PhotoSequence",
                 :description "A sequence of 360 photos along with metadata.",
                 :type "object"},
 :BatchUpdatePhotosRequest {:id "BatchUpdatePhotosRequest",
                            :type "object",
                            :description "Request to update the metadata of photos. Updating the pixels of photos is not supported.",
                            :properties {:updatePhotoRequests {:description "Required. List of UpdatePhotoRequests.",
                                                               :items {:$ref "UpdatePhotoRequest"},
                                                               :type "array"}}},
 :Operation {:type "object",
             :description "This resource represents a long-running operation that is the result of a network API call.",
             :id "Operation",
             :properties {:name {:type "string",
                                 :description "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."},
                          :error {:description "The error result of the operation in case of failure or cancellation.",
                                  :$ref "Status"},
                          :response {:description "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
                                     :additionalProperties {:description "Properties of the object. Contains field @type with type URL.",
                                                            :type "any"},
                                     :type "object"},
                          :done {:description "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                                 :type "boolean"},
                          :metadata {:additionalProperties {:description "Properties of the object. Contains field @type with type URL.",
                                                            :type "any"},
                                     :type "object",
                                     :description "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."}}},
 :BatchDeletePhotosRequest {:properties {:photoIds {:items {:type "string"},
                                                    :description "Required. IDs of the Photos. HTTP GET requests require the following syntax for the URL query parameter: `photoIds=&photoIds=&...`.",
                                                    :type "array"}},
                            :id "BatchDeletePhotosRequest",
                            :type "object",
                            :description "Request to delete multiple Photos."},
 :LatLngBounds {:properties {:northeast {:$ref "LatLng",
                                         :description "The northeast corner of these bounds."},
                             :southwest {:description "The southwest corner of these bounds.",
                                         :$ref "LatLng"}},
                :description "A rectangle in geographical coordinates.",
                :type "object",
                :id "LatLngBounds"},
 :BatchUpdatePhotosResponse {:type "object",
                             :id "BatchUpdatePhotosResponse",
                             :properties {:results {:type "array",
                                                    :description "List of results for each individual Photo updated, in the same order as the request.",
                                                    :items {:$ref "PhotoResponse"}}},
                             :description "Response to batch update of metadata of one or more Photos."},
 :Measurement3d {:type "object",
                 :properties {:x {:format "float",
                                  :type "number",
                                  :description "The sensor measurement in the x axis."},
                              :captureTime {:description "The timestamp of the IMU measurement.",
                                            :type "string",
                                            :format "google-datetime"},
                              :y {:format "float",
                                  :type "number",
                                  :description "The sensor measurement in the y axis."},
                              :z {:format "float",
                                  :type "number",
                                  :description "The sensor measurement in the z axis."}},
                 :description "A Generic 3d measurement sample.",
                 :id "Measurement3d"},
 :ImuDataGapFailureDetails {:id "ImuDataGapFailureDetails",
                            :properties {:gapStartTime {:description "Relative time (from the start of the video stream) when the gap started.",
                                                        :format "google-duration",
                                                        :type "string"},
                                         :gapDuration {:description "The duration of the gap in IMU data that was found.",
                                                       :type "string",
                                                       :format "google-duration"}},
                            :description "Details related to ProcessingFailureReason#IMU_DATA_GAP. If there are multiple IMU data gaps, only the one with the largest duration is reported here.",
                            :type "object"},
 :Empty {:properties {},
         :description "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
         :id "Empty",
         :type "object"},
 :LatLng {:description "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
          :id "LatLng",
          :type "object",
          :properties {:longitude {:format "double",
                                   :type "number",
                                   :description "The longitude in degrees. It must be in the range [-180.0, +180.0]."},
                       :latitude {:description "The latitude in degrees. It must be in the range [-90.0, +90.0].",
                                  :format "double",
                                  :type "number"}}},
 :Level {:type "object",
         :id "Level",
         :description "Level information containing level number and its corresponding name.",
         :properties {:name {:description "Required. A name assigned to this Level, restricted to 3 characters. Consider how the elevator buttons would be labeled for this level if there was an elevator.",
                             :type "string"},
                      :number {:description "Optional. Floor number, used for ordering. 0 indicates the ground level, 1 indicates the first level above ground level, -1 indicates the first level under ground level. Non-integer values are OK.",
                               :type "number",
                               :format "double"}}},
 :NotOutdoorsFailureDetails {:description "Details related to ProcessingFailureReason#NOT_OUTDOORS. If there are multiple indoor frames found, the first frame is recorded here.",
                             :properties {:startTime {:description "Relative time (from the start of the video stream) when an indoor frame was found.",
                                                      :type "string",
                                                      :format "google-duration"}},
                             :id "NotOutdoorsFailureDetails",
                             :type "object"},
 :UploadRef {:id "UploadRef",
             :properties {:uploadUrl {:type "string",
                                      :description "An upload reference should be unique for each user. It follows the form: \"https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}\""}},
             :description "Upload reference for media files.",
             :type "object"},
 :Photo {:type "object",
         :description "Photo is used to store 360 photos along with photo metadata.",
         :properties {:uploadTime {:readOnly true,
                                   :description "Output only. Time when the image was uploaded.",
                                   :format "google-datetime",
                                   :type "string"},
                      :captureTime {:format "google-datetime",
                                    :description "Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.",
                                    :type "string"},
                      :thumbnailUrl {:description "Output only. The thumbnail URL for showing a preview of the given photo.",
                                     :type "string",
                                     :readOnly true},
                      :uploadReference {:$ref "UploadRef",
                                        :description "Input only. Required when creating a photo. Input only. The resource URL where the photo bytes are uploaded to."},
                      :viewCount {:type "string",
                                  :readOnly true,
                                  :description "Output only. View count of the photo.",
                                  :format "int64"},
                      :transferStatus {:readOnly true,
                                       :enum ["TRANSFER_STATUS_UNKNOWN"
                                              "NEVER_TRANSFERRED"
                                              "PENDING"
                                              "COMPLETED"
                                              "REJECTED"
                                              "EXPIRED"
                                              "CANCELLED"
                                              "RECEIVED_VIA_TRANSFER"],
                                       :type "string",
                                       :enumDescriptions ["The status of this transfer is unspecified."
                                                          "This photo has never been in a transfer."
                                                          "This photo transfer has been initiated, but the receiver has not yet responded."
                                                          "The photo transfer has been completed, and this photo has been transferred to the recipient."
                                                          "The recipient rejected this photo transfer."
                                                          "The photo transfer expired before the recipient took any action."
                                                          "The sender cancelled this photo transfer."
                                                          "The recipient owns this photo due to a rights transfer."],
                                       :description "Output only. Status of rights transfer on this photo."},
                      :pose {:description "Optional. Pose of the photo.",
                             :$ref "Pose"},
                      :shareLink {:description "Output only. The share link for the photo.",
                                  :type "string",
                                  :readOnly true},
                      :mapsPublishStatus {:readOnly true,
                                          :enumDescriptions ["The status of the photo is unknown."
                                                             "The photo is published to the public through Google Maps."
                                                             "The photo has been rejected for an unknown reason."],
                                          :type "string",
                                          :enum ["UNSPECIFIED_MAPS_PUBLISH_STATUS"
                                                 "PUBLISHED"
                                                 "REJECTED_UNKNOWN"],
                                          :description "Output only. Status in Google Maps, whether this photo was published or rejected."},
                      :downloadUrl {:type "string",
                                    :description "Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.",
                                    :readOnly true},
                      :connections {:items {:$ref "Connection"},
                                    :type "array",
                                    :description "Optional. Connections to other photos. A connection represents the link from this photo to another photo."},
                      :places {:description "Optional. Places where this photo belongs.",
                               :type "array",
                               :items {:$ref "Place"}},
                      :photoId {:readOnly true,
                                :description "Required. Output only. Required when updating a photo. Output only when creating a photo. Identifier for the photo, which is unique among all photos in Google.",
                                :$ref "PhotoId"}},
         :id "Photo"},
 :GpsDataGapFailureDetails {:description "Details related to ProcessingFailureReason#GPS_DATA_GAP. If there are multiple GPS data gaps, only the one with the largest duration is reported here.",
                            :properties {:gapStartTime {:description "Relative time (from the start of the video stream) when the gap started.",
                                                        :format "google-duration",
                                                        :type "string"},
                                         :gapDuration {:type "string",
                                                       :description "The duration of the gap in GPS data that was found.",
                                                       :format "google-duration"}},
                            :id "GpsDataGapFailureDetails",
                            :type "object"},
 :Place {:description "Place metadata for an entity.",
         :type "object",
         :properties {:placeId {:description "Place identifier, as described in https://developers.google.com/places/place-id.",
                                :type "string"},
                      :languageCode {:type "string",
                                     :description "Output only. The language_code that the name is localized with. This should be the language_code specified in the request, but may be a fallback.",
                                     :readOnly true},
                      :name {:description "Output only. The name of the place, localized to the language_code.",
                             :type "string",
                             :readOnly true}},
         :id "Place"},
 :ListPhotoSequencesResponse {:id "ListPhotoSequencesResponse",
                              :properties {:nextPageToken {:type "string",
                                                           :description "Token to retrieve the next page of results, or empty if there are no more results in the list."},
                                           :photoSequences {:type "array",
                                                            :items {:$ref "Operation"},
                                                            :description "List of photo sequences via Operation interface. The maximum number of items returned is based on the pageSize field in the request. Each item in the list can have three possible states, * `Operation.done` = false, if the processing of PhotoSequence is not finished yet. * `Operation.done` = true and `Operation.error` is populated, if there was an error in processing. * `Operation.done` = true and `Operation.response` contains a PhotoSequence message, In each sequence, only Id is populated."}},
                              :type "object",
                              :description "Response to list all photo sequences that belong to a user."},
 :BatchDeletePhotosResponse {:properties {:status {:type "array",
                                                   :items {:$ref "Status"},
                                                   :description "The status for the operation to delete a single Photo in the batch request."}},
                             :id "BatchDeletePhotosResponse",
                             :description "Response to batch delete of one or more Photos.",
                             :type "object"},
 :PhotoId {:type "object",
           :properties {:id {:type "string",
                             :description "A unique identifier for a photo."}},
           :description "Identifier for a Photo.",
           :id "PhotoId"},
 :Pose {:properties {:roll {:format "double",
                            :description "Roll, measured in degrees. Value must be >= 0 and <360. A value of 0 means level with the horizon. NaN indicates an unmeasured quantity.",
                            :type "number"},
                     :level {:$ref "Level",
                             :description "Level (the floor in a building) used to configure vertical navigation."},
                     :pitch {:type "number",
                             :format "double",
                             :description "Pitch, measured at the center of the photo in degrees. Value must be >=-90 and <= 90. A value of -90 means looking directly down, and a value of 90 means looking directly up. NaN indicates an unmeasured quantity."},
                     :heading {:format "double",
                               :type "number",
                               :description "The following pose parameters pertain to the center of the photo. They match https://developers.google.com/streetview/spherical-metadata. Compass heading, measured at the center of the photo in degrees clockwise from North. Value must be >=0 and <360. NaN indicates an unmeasured quantity."},
                     :gpsRecordTimestampUnixEpoch {:description "Time of the GPS record since UTC epoch.",
                                                   :type "string",
                                                   :format "google-datetime"},
                     :accuracyMeters {:type "number",
                                      :format "float",
                                      :description "The estimated horizontal accuracy of this pose in meters with 68% confidence (one standard deviation). For example, on Android, this value is available from this method: https://developer.android.com/reference/android/location/Location#getAccuracy(). Other platforms have different methods of obtaining similar accuracy estimations."},
                     :latLngPair {:$ref "LatLng",
                                  :description "Latitude and longitude pair of the pose, as explained here: https://cloud.google.com/datastore/docs/reference/rest/Shared.Types/LatLng When creating a Photo, if the latitude and longitude pair are not provided, the geolocation from the exif header is used. A latitude and longitude pair not provided in the photo or exif header causes the photo process to fail."},
                     :altitude {:description "Altitude of the pose in meters above WGS84 ellipsoid. NaN indicates an unmeasured quantity.",
                                :format "double",
                                :type "number"}},
        :description "Raw pose measurement for an entity.",
        :type "object",
        :id "Pose"},
 :InsufficientGpsFailureDetails {:id "InsufficientGpsFailureDetails",
                                 :properties {:gpsPointsFound {:type "integer",
                                                               :description "The number of GPS points that were found in the video.",
                                                               :format "int32"}},
                                 :description "Details related to ProcessingFailureReason#INSUFFICIENT_GPS.",
                                 :type "object"},
 :Imu {:description "IMU data from the device sensors.",
       :id "Imu",
       :properties {:accelMpsps {:description "The accelerometer measurements in meters/sec^2 with increasing timestamps from devices.",
                                 :type "array",
                                 :items {:$ref "Measurement3d"}},
                    :magUt {:description "The magnetometer measurements of the magnetic field in microtesla (uT) with increasing timestamps from devices.",
                            :items {:$ref "Measurement3d"},
                            :type "array"},
                    :gyroRps {:type "array",
                              :items {:$ref "Measurement3d"},
                              :description "The gyroscope measurements in radians/sec with increasing timestamps from devices."}},
       :type "object"},
 :ListPhotosResponse {:type "object",
                      :id "ListPhotosResponse",
                      :description "Response to list all photos that belong to a user.",
                      :properties {:photos {:description "List of photos. The pageSize field in the request determines the number of items returned.",
                                            :type "array",
                                            :items {:$ref "Photo"}},
                                   :nextPageToken {:description "Token to retrieve the next page of results, or empty if there are no more results in the list.",
                                                   :type "string"}}},
 :Connection {:properties {:target {:description "Required. The destination of the connection from the containing photo to another photo.",
                                    :$ref "PhotoId"}},
              :id "Connection",
              :type "object",
              :description "A connection is the link from a source photo to a destination photo."},
 :PhotoResponse {:id "PhotoResponse",
                 :properties {:photo {:$ref "Photo",
                                      :description "The Photo resource, if the request was successful."},
                              :status {:description "The status for the operation to get or update a single photo in the batch request.",
                                       :$ref "Status"}},
                 :type "object",
                 :description "Response payload for a single Photo in batch operations including BatchGetPhotos and BatchUpdatePhotos."},
 :Status {:type "object",
          :properties {:details {:items {:additionalProperties {:description "Properties of the object. Contains field @type with type URL.",
                                                                :type "any"},
                                         :type "object"},
                                 :description "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                                 :type "array"},
                       :message {:description "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
                                 :type "string"},
                       :code {:format "int32",
                              :description "The status code, which should be an enum value of google.rpc.Code.",
                              :type "integer"}},
          :id "Status",
          :description "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."}}
